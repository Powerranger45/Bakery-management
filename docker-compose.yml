version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: bakery-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: bakery-rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./bakery-backend
      dockerfile: Dockerfile
    container_name: bakery-backend
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT_BACKEND}
      NODE_ENV: development
      RABBITMQ_URL: ${RABBITMQ_URL}
    ports:
      - "${PORT_BACKEND}:${PORT_BACKEND}"
    volumes:
      - ./bakery-backend:/app
      - /app/node_modules
    command: >
      sh -c "npx prisma migrate deploy && npm start"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:${PORT_BACKEND}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bakery-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${PORT_FRONTEND}:${PORT_FRONTEND}"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      REACT_APP_API_URL: "http://localhost:${PORT_BACKEND}/api"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:${PORT_FRONTEND}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Worker Service (for processing orders)
  worker:
    build:
      context: ./bakery-backend
      dockerfile: Dockerfile
    container_name: bakery-worker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: development
      RABBITMQ_URL: ${RABBITMQ_URL}
    volumes:
      - ./bakery-backend:/app
      - /app/node_modules
    command: >
      sh -c "node src/workers/orderProcessor.js"
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
  rabbitmq-data:
